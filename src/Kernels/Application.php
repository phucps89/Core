<?php
/**
 * Created by PhpStorm.
 * User: admin
 * Date: 10/29/2018
 * Time: 10:12 AM
 */

namespace Sel2b\Core\Kernels;


use Illuminate\Http\Exceptions\HttpResponseException;
use Illuminate\Http\RedirectResponse;
use Illuminate\Http\Response;
use Symfony\Component\HttpKernel\Exception\NotFoundHttpException;
use Laravel\Lumen\Routing\Controller as LumenController;

class Application extends \Laravel\Lumen\Application
{

    protected $currentExtendRoute;

    public function bootstrapRouter()
    {
        parent::bootstrapRouter(); // TODO: Change the autogenerated stub
        $this->router = new Router($this);
    }

    /**
     * Handle a route found by the dispatcher.
     *
     * @param  array $routeInfo
     * @return mixed
     */
    protected function handleFoundRoute($routeInfo)
    {
        $this->currentRoute = $routeInfo;

        $this->currentExtendRoute = $this->findExtendsRoute($this->router->getRoutes(), $this->currentRoute[1]['as'] ?? null);

        $this['request']->setRouteResolver(function () {
            return $this->currentRoute;
        });

        $action = $routeInfo[1];
        // Pipe through route middleware...
        if (isset($action['middleware'])) {
            $middleware = $this->gatherMiddlewareClassNames($action['middleware']);

            return $this->prepareResponse($this->sendThroughPipeline($middleware, function () {
                return $this->callActionOnArrayBasedRoute($this['request']->route());
            }));
        }

        return $this->prepareResponse(
            $this->callActionOnArrayBasedRoute($routeInfo)
        );
    }


    protected function callActionOnArrayBasedRoute($routeInfo)
    {
        if ($middleware = $this->currentExtendRoute['action']['middleware'] ?? []) {
            $middleware = $this->gatherMiddlewareClassNames($middleware);
        }

        return $this->prepareResponse($this->sendThroughPipeline($middleware, function () use ($routeInfo) {
            return parent::callActionOnArrayBasedRoute($routeInfo);
        }));
    }

    private function findExtendsRoute($routes, $alias)
    {
        foreach ($routes as $route) {
            if (strtoupper($route['method']) == 'EXTENDS' && $route['action']['look'] == $alias) {
                return $route;
            }
        }
        return null;
    }

    private function callAfter($route, $parameter)
    {
        list($controller, $method) = explode('@', $route['action']['uses']);
        if (!method_exists($instance = $this->make($controller), $method)) {
            throw new NotFoundHttpException;
        }

        return $this->call([$instance, $method], [$parameter]);
    }

    /**
     * Call a controller callable and return the response.
     *
     * @param  callable $callable
     * @param  array $parameters
     * @return \Illuminate\Http\Response
     */
    protected function callControllerCallable(callable $callable, array $parameters = [])
    {
        try {
//            dd($callable);
            $result = $this->call($callable, $parameters);

            if ($this->currentExtendRoute) {
                $result = $this->callAfter($this->currentExtendRoute, $result);
            }

            return $result;
        } catch (HttpResponseException $e) {
            return $e->getResponse();
        }
    }

}