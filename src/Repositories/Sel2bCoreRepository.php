<?php
/**
 * Created by PhpStorm.
 * User: admin
 * Date: 10/26/2018
 * Time: 1:58 PM
 */

namespace Sel2b\Core\Repositories;


use Illuminate\Database\Eloquent\ModelNotFoundException;
use Illuminate\Support\Facades\Validator;
use Prettus\Repository\Eloquent\BaseRepository;
use Sel2b\Core\Services\Validator\Src\ValidationRuleInterface;

abstract class Sel2bCoreRepository extends BaseRepository
{
    public function find($id, $columns = ['*'])
    {
        try {
            return parent::find($id, $columns); // TODO: Change the autogenerated stub
        } catch (ModelNotFoundException $e) {
            return null;
        }
    }

    /**
     * @return static
     */
    public static function getInstance(){
        return app(static::class);
    }

    /**
     * @param ValidationRuleInterface $objValidator
     * @param $data
     * @return array
     */
    protected function _validateData($objValidator, $data)
    {
        $errMgs    = [];
        $validator = Validator::make($data, $objValidator::rules(), $objValidator::messages());


        if ($validator->fails()) {
            $errMgs = $validator->getMessageBag()->toArray();
        }

        return $errMgs;
    }

    public function _updateById($id, $params)
    {
        $data = $this->model->find($id)->update($params);
        return $data;
    }

    /**
     * @param array $select
     * @param array $conditions
     * @return \Illuminate\Database\Eloquent\Builder
     */
    public function _get($select = ['*'], array $conditions = [])
    {
        $query = $this->model->newQuery()->select($select);
        if (count($conditions)) $query->where($conditions);
        return $query;
    }

    public function _first($select = ['*'], array $conditions = [])
    {
        $query = $this->_get($select, $conditions);
        $result = $query->first();
        return $result;
    }

    /**
     * @param $dataUpdate
     * @param array $conditions
     * @return \Illuminate\Database\Eloquent\Builder
     */
    public function _update($dataUpdate, array $conditions = [])
    {
        $query = $this->model->newQuery();
        if (count($conditions)) {
            $query->where($conditions)->update($dataUpdate);
        } else {
            $query->update($dataUpdate);
        }
        return $query;
    }
}